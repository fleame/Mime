for (i in names(rs.table.list)) {
rs.table.list[[i]] $ID = rawtableID[[i]]$ID
rs.table.list[[i]] = rs.table.list[[i]] %>% dplyr::select('ID', everything())
}
return(rs.table.list)
}
returnRStoROC = function(rs.table.list, AUC_time){
roc.rs <- lapply(rs.table.list, function(x){
mySurv <- Surv(x$OS.time, x$OS)
x$Group = ifelse(x$RS > median(x$RS),'High','Low')
if(length(unique(x$Group))>1){
x$Group = factor(x$Group, levels = c('Low','High'))
} else {
x$Group = ifelse(x$RS > mean(x$RS),'High','Low')
}
x$Group = factor(x$Group, levels = c('Low','High'))
data.survdiff <- survdiff( mySurv ~ x$Group)
HR = (data.survdiff$obs[2]/data.survdiff$exp[2])/(data.survdiff$obs[1]/data.survdiff$exp[1])
if(HR > 1){
if(auc_cal_method =='NNE'){
risk.survivalROC<- survivalROC(Stime=x$OS.time,
status= x$OS,
marker = x$RS,
predict.time =  365*AUC_time,
method="NNE",span = 0.25*nrow(x)^(-0.20)
)
} else if(auc_cal_method =='KM') {
risk.survivalROC<- survivalROC(Stime=x$OS.time,
status= x$OS,
marker = x$RS,
predict.time =  365*AUC_time,
method="KM"
)
} else {
print('Please provide the correct parameters for method')
}
} else {
if(auc_cal_method =='NNE'){
risk.survivalROC<- survivalROC(Stime=x$OS.time,
status= x$OS,
marker = x$RS,
predict.time =  365*AUC_time,
method="NNE",span = 0.25*nrow(x)^(-0.20)
)
} else if(auc_cal_method =='KM') {
risk.survivalROC<- survivalROC(Stime=x$OS.time,
status= x$OS,
marker = x$RS,
predict.time =  365*AUC_time,
method="KM"
)
} else {
print('Please provide the correct parameters for method')
}
}
roc_1 <- cbind(round(risk.survivalROC$TP,3), round(risk.survivalROC$FP,3))
roc_1 = as.data.frame(roc_1)
colnames(roc_1) = c('TP','FP')
roc_1$AUC = risk.survivalROC$AUC
roc_1$HR = HR
return(roc_1)
})
return(roc.rs)
}
est_dd2 <- train_data[, c('OS.time', 'OS', feature.a)]
data <- list(x = t(est_dd2[, -c(1, 2)]), y = est_dd2$OS.time,
censoring.status = est_dd2$OS,
featurenames = colnames(est_dd2)[-c(1, 2)])
if(mode == 'all'){
feature.ab =feature.a
for (i in names(inputmatrix.list)) {
feature.ab = intersect(feature.ab, colnames(inputmatrix.list[[i]]))
}
num.b = length(feature.ab)
if(num.b == num.a) {
ml.names = names(res.by.ML.Dev.Prog.Sig$ml.res)
for (i in ml.names[c(which(ml.names %in% c('RSF')), grep('+ RSF',ml.names,fixed = T)
)]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["xvar.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(
which(ml.names %in% c('survival - SVM')), grep('+ survival-SVM',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(which(ml.names %in% c('CoxBoost')), grep('+ CoxBoost',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["xnames"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, newdata = x[, -c(1, 2)], newtime = x[, 1],  newstatus = x[, 2], type = "lp")))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(grep('Enet[',ml.names,fixed = T), grep('+ Enet',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'link', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(which(ml.names %in% c('GBM')), grep('+ GBM',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[1]]
best = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[2]]
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, x, n.trees = best, type = 'link')))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(which(ml.names %in% c('Lasso')), grep('+ Lasso',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[,1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(which(ml.names %in% c('plsRcox')), grep('+ plsRcox',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac =colnames(fit[["dataX"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = "lp", newdata = x[, -c(1, 2)])))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[ which(ml.names %in% c('Ridge'))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[1]]
cv.fit =res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[2]]
feature.ac = fit[["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1,2)]), s = cv.fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c( grep('+ Ridge',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[c(which(ml.names %in% c('StepCox[both]','StepCox[backward]','StepCox[forward]')), grep('+ StepCox',ml.names,fixed = T))]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]]
feature.ac = names(fit[["coefficients"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=predict(fit, type = 'risk', newdata = x))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
for (i in ml.names[ grep('SuperPC',ml.names,fixed = T)]) {
print(i)
fit = res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[1]]
cv.fit =res.by.ML.Dev.Prog.Sig[["ml.res"]][[i]][[2]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ab)]})
rs <- lapply(val_dd_list, function(w){
test <- list(x = t(w[,-c(1,2)]), y = w$OS.time, censoring.status = w$OS, featurenames = colnames(w)[-c(1,2)])
ff <- superpc.predict(fit, data, test, threshold = cv.fit$thresholds[which.max(cv.fit[["scor"]][1,])], n.components = 1)
rr <- as.numeric(ff$v.pred)
rr2 <- cbind(w[,1:2], RS = rr)
return(rr2)
})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[i]] =roc.test
}
return(AUC.rs)
} else {
miss.gene = feature.a[which(!feature.a%in%feature.ab)]
print(paste0('Sorry, There are some genes in not matched,
meaning that some of the genes appear in the model
but do not exist inside certain cohorts.'))
}
} else if (mode == 'single'){
feature.ab =feature.a
for (i in names(inputmatrix.list)) {
feature.ab = intersect(feature.ab, colnames(inputmatrix.list[[i]]))
}
num.b = length(feature.ab)
if(num.b == num.a) {
if (single_ml=='RSF'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
print(i)
feature.ac = fit[["xvar.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='Enet'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'link', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='StepCox'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = names(fit[["coefficients"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=predict(fit, type = 'risk', newdata = x))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='CoxBoost'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["xnames"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, newdata = x[, -c(1, 2)], newtime = x[, 1],  newstatus = x[, 2], type = "lp")))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='plsRcox'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac =colnames(fit[["dataX"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = "lp", newdata = x[, -c(1, 2)])))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='superpc'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$SuperPC$fit
cv.fit =  res.by.ML.Dev.Prog.Sig$ml.res$SuperPC$cv.fit
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ab)]})
rs <- lapply(val_dd_list, function(w){
test <- list(x = t(w[,-c(1,2)]), y = w$OS.time, censoring.status = w$OS, featurenames = colnames(w)[-c(1,2)])
ff <- superpc.predict(fit, data, test, threshold = cv.fit$thresholds[which.max(cv.fit[["scor"]][1,])], n.components = 1)
rr <- as.numeric(ff$v.pred)
rr2 <- cbind(w[,1:2], RS = rr)
return(rr2)
})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='GBM'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$GBM$fit
best =  res.by.ML.Dev.Prog.Sig$ml.res$GBM$best
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, x, n.trees = best, type = 'link')))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='survivalsvm'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='Ridge'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$Ridge$fit
cv.fit= res.by.ML.Dev.Prog.Sig$ml.res$Ridge$cv.fit
feature.ac = fit[["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1,2)]), s = cv.fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (single_ml=='Lasso'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$Lasso
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[,1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
} else {
miss.gene = feature.a[which(!feature.a%in%feature.ab)]
print(paste0('Sorry, There are some genes in not matched,
meaning that some of the genes appear in the model
but do not exist inside certain cohorts.'))
}
} else if (mode == 'double' ){
feature.ab =feature.a
for (i in names(inputmatrix.list)) {
feature.ab = intersect(feature.ab, colnames(inputmatrix.list[[i]]))
}
num.b = length(feature.ab)
if(num.b == num.a) {
if (double_ml2=='RSF'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
print(i)
feature.ac = fit[["xvar.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='Enet'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'link', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='StepCox'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = names(fit[["coefficients"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=predict(fit, type = 'risk', newdata = x))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='CoxBoost'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["xnames"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, newdata = x[, -c(1, 2)], newtime = x[, 1],  newstatus = x[, 2], type = "lp")))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='plsRcox'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac =colnames(fit[["dataX"]])
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = "lp", newdata = x[, -c(1, 2)])))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='superpc'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$SuperPC$fit
cv.fit =  res.by.ML.Dev.Prog.Sig$ml.res$SuperPC$cv.fit
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ab)]})
rs <- lapply(val_dd_list, function(w){
test <- list(x = t(w[,-c(1,2)]), y = w$OS.time, censoring.status = w$OS, featurenames = colnames(w)[-c(1,2)])
ff <- superpc.predict(fit, data, test, threshold = cv.fit$thresholds[which.max(cv.fit[["scor"]][1,])], n.components = 1)
rr <- as.numeric(ff$v.pred)
rr2 <- cbind(w[,1:2], RS = rr)
return(rr2)
})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='GBM'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$GBM$fit
best =  res.by.ML.Dev.Prog.Sig$ml.res$GBM$best
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, x, n.trees = best, type = 'link')))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='survivalsvm'){
fit= res.by.ML.Dev.Prog.Sig$ml.res[[1]]
feature.ac = fit[["var.names"]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS=as.numeric(predict(fit, x)$predicted))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='Ridge'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$Ridge$fit
cv.fit= res.by.ML.Dev.Prog.Sig$ml.res$Ridge$cv.fit
feature.ac = fit[["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[, 1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1,2)]), s = cv.fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
if (double_ml2=='Lasso'){
fit= res.by.ML.Dev.Prog.Sig$ml.res$Lasso
feature.ac = fit[["glmnet.fit"]][["beta"]]@Dimnames[[1]]
val_dd_list2 <- lapply(val_dd_list, function(x){x[, c('OS.time','OS', feature.ac)]})
rs <- lapply(val_dd_list2, function(x){cbind(x[,1:2], RS = as.numeric(predict(fit, type = 'response', newx = as.matrix(x[, -c(1, 2)]), s = fit$lambda.min)))})
roc.test = returnRStoROC(rs.table.list = rs,AUC_time = AUC_time)
AUC.rs[[names(res.by.ML.Dev.Prog.Sig$ml.res)]] =roc.test
return(AUC.rs)
}
} else {
miss.gene = feature.a[which(!feature.a%in%feature.ab)]
print(paste0('Sorry, There are some genes in not matched,
meaning that some of the genes appear in the model
but do not exist inside certain cohorts.'))
}
}
} else {
print('Please refer to the sample data and process to improve the relevant parameters and preprocessing files')
}
} else {
print(paste0('The shortest overall survival time in the queue you provided is ',less.os.time, ' days' ))
print("Please set a reasonable AUC_time that is less than this length of time!")
}
}
use_r("cal_AUC_ml_res")
devtools::load_all(".")
document()
install()
use_testthat()
test()
use_test("cal_AUC_ml_res")
use_test("cal_AUC_ml_res")
test()
use_package()
use_readme_rmd()
build_readme()
build_readme()
check()
install()
has_devel()
library(available)
install.packages("available")
library(available)
available("MIME")
install.packages("styler")
library(styler)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_pkg()
check()
styler:::style_active_pkg()
usethis::use_citation()
library(withr)
ImportsSuggestsSuggestswith_*()local_*()Imports
devtools::load_all()Imports
devtools::load_all(".")
document()
requireNamespace(IOBR)
requireNamespace("IOBR")
styler:::style_active_file()
devtools::load_all(".")
# options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
# options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
depens<-c('tibble', 'survival', 'survminer', 'limma', "DESeq2","devtools", 'limSolve', 'GSVA', 'e1071', 'preprocessCore',
"devtools", "tidyHeatmap", "caret", "glmnet", "ppcor",  "timeROC", "pracma", "factoextra",
"FactoMineR", "WGCNA", "patchwork", 'ggplot2', "biomaRt", 'ggpubr', 'ComplexHeatmap')
for(i in 1:length(depens)){
depen<-depens[i]
if (!requireNamespace(depen, quietly = TRUE))  BiocManager::install(depen,update = FALSE)
}
devtools::install_github("IOBR/IOBR")
devtools::install_github("IOBR/IOBR")
devtools::install_local("C:/Users/Yihao Zhang/Desktop/IOBR-master.zip")
devtools::install_local("C:/Users/Yihao Zhang/Desktop/IOBR-master.zip")
devtools::install_local("C:/Users/Yihao Zhang/Desktop/IOBR-master.zip")
devtools::install_local("C:/Users/Yihao Zhang/Desktop/IOBR-master.zip")
devtools::load_all(".")
devtools::load_all(".")
BiocManager::install("mixOmics")
BiocManager::install("sva")
BiocManager::install(c("CoxBoost", "cancerclass", "plsRcox", "sparrow"))
devtools::load_all(".")
install_github("binderh/CoxBoost")
library(devtools)
install_github("binderh/CoxBoost")
install.packages("plsRcox")
BiocManager::install("survcomp")
devtools::load_all(".")
library(devtools)
build_readme()
devtools::load_all(".")
build_readme()
devtools::load_all(".")
build_readme()
library(devtools)
build_readme()
build_readme()
build_readme()
build_readme()
usethis::use_vignette("Mime-vignette")
devtools::load_all(".")
library(dplyr)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::load_all(".")
devtools::load_all(".")
